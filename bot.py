
from contextlib import suppress
import logging
import json
import os
from datetime import datetime, date, timedelta
import aiocron
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))
OPERATOR_ID = 611617181

# ‚úÖ –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ‚úÖ CallbackData –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è Dispatcher
reply_cb = CallbackData("reply", "client_id")
status_cb = CallbackData("status", "action", "order_id", "client_id")

def save_order(order):
    now = datetime.now()
    order['timestamp'] = now.strftime('%Y-%m-%d %H:%M:%S')
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(order)
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

@aiocron.crontab('0 0 * * *')
async def send_daily_report():
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    yesterday = (date.today() - timedelta(days=1)).strftime('%Y-%m-%d')
    orders = [o for o in data if o['timestamp'].startswith(yesterday)]
    total = sum(o.get("total", 0) for o in orders)
    count = len(orders)

    text = f"üßæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {yesterday}:\n\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º"
    if orders:
        text += "\n\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n"
        for i, order in enumerate(orders, 1):
            name = order.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            amount = order.get("total", 0)
            text += f"{i}) {name} ‚Äî {amount:,} —Å—É–º\n"

    await bot.send_message(ADMIN_CHAT_ID, text)

    updated_data = [o for o in data if o.get("status") != "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"]
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(updated_data, f, ensure_ascii=False, indent=2)

@dp.message_handler(Text(equals="üìä –û—Ç—á—ë—Ç"))
async def report_button_handler(message: types.Message):
    if message.from_user.id != ADMIN_CHAT_ID:
        return

    today = date.today().strftime('%Y-%m-%d')
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    orders = [o for o in data if o['timestamp'].startswith(today)]
    total = sum(o.get("total", 0) for o in orders)
    count = len(orders)

    text = f"üìä –¢–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç –∑–∞ {today}:\n\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º"
    if orders:
        text += "\n\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n"
        for i, order in enumerate(orders, 1):
            name = order.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            amount = order.get("total", 0)
            text += f"{i}) {name} ‚Äî {amount:,} —Å—É–º\n"

    await message.answer(text)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="üõç –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", web_app=WebAppInfo(url="https://cedar-absorbing-oriole.glitch.me/")))
    kb.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    if message.from_user.id == ADMIN_CHAT_ID:
        kb.add(KeyboardButton("üìä –û—Ç—á—ë—Ç"))

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "üöú –î–û–°–¢–ê–í–ö–ê –ü–†–Ø–ú–û –° –î–ï–•–ö–ê–ù–°–ö–û–ì–û –û–ü–¢–û–í–û–ì–û –ë–ê–ó–ê–†–ê\n"
        "üí∏ –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "üè° –ù–µ –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞ ‚Äî –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏ –≠–ö–û–ù–û–ú–¨–¢–ï —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "üõç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤*, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ üì∏–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–ª–∏ —Ñ–æ—Ç–æ –ø—Ä—è–º–æ —Å—é–¥–∞ ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑! ",
        reply_markup=kb,
        parse_mode='Markdown'
    )
@dp.message_handler(lambda message: message.chat.id == OPERATOR_ID)
async def operator_message_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("reply_client_id")

    if client_id:
        try:
            await bot.send_message(client_id, f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
            await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
            await state.finish()
            return
        except:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É.")
            return

    if message.reply_to_message and "ID:" in message.reply_to_message.text:
        try:
            text = message.reply_to_message.text
            client_id = int(text.split("ID:")[1].split()[0].strip())
            await bot.send_message(client_id, f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
            await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.")
            return
        except:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É.")
            return

    await message.answer("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–≤–µ—Ç–∏—Ç—å' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –µ—Å—Ç—å ID.")

@dp.callback_query_handler(reply_cb.filter())
async def handle_reply_button(query: types.CallbackQuery, callback_data: dict):
    client_id = int(callback_data["client_id"])
    state = dp.current_state(user=query.from_user.id)
    await state.update_data(reply_client_id=client_id)
    await bot.send_message(query.from_user.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É.")
    await query.answer()

@dp.message_handler(Text(equals="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(text="üõç –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", web_app=WebAppInfo(url="https://cedar-absorbing-oriole.glitch.me/")))
    kb.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    await message.answer(
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:+998(97)111-24-24'>+998 97 111 24 24</a>\n"
        "Telegram: <a href='https://t.me/jamshwdovich_8'>@jamshwdovich_8</a>"
        "üßë‚Äçüí¨ <b>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º–æ —Å—é–¥–∞</b> ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        parse_mode='HTML'
    )


@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def webapp_data_handler(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    try:
        data = json.loads(message.web_app_data.data)
        order_text = data.get("text")
        order_id = data.get("order_id")
        client_id = data.get("client_id") or message.from_user.id
        markup = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=status_cb.new(action="–æ–ø–ª–∞—á–µ–Ω–æ", order_id=order_id, client_id=client_id)),
            InlineKeyboardButton("üöó –í –ø—É—Ç–∏", callback_data=status_cb.new(action="–≤_–ø—É—Ç–∏", order_id=order_id, client_id=client_id)),
            InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=status_cb.new(action="–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", order_id=order_id, client_id=client_id))
        )
        await bot.send_message(chat_id='611617181', text=order_text, parse_mode="Markdown", reply_markup=markup)
        await bot.send_message(chat_id=client_id, text=f"üì¶ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\nüì≤ *–°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!*\n\n{order_text}", parse_mode="Markdown")
        save_order(data)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

@dp.callback_query_handler(status_cb.filter())
async def status_handler(query: types.CallbackQuery, callback_data: dict):
    status = callback_data['action']
    order_id = callback_data['order_id']
    client_id = int(callback_data['client_id'])
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    for order in data:
        if order.get("order_id") == order_id:
            order["status"] = status
            break
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    status_texts = {
        '–æ–ø–ª–∞—á–µ–Ω–æ': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{} –æ–ø–ª–∞—á–µ–Ω.',
        '–≤_–ø—É—Ç–∏': 'üöó –í–∞—à –∑–∞–∫–∞–∑ #{} –≤ –ø—É—Ç–∏.',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ': 'üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'
    }
    message = status_texts.get(status, 'üì¶ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω').format(order_id)
    await bot.send_message(chat_id=client_id, text=message)
    await query.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")

@dp.message_handler(lambda message: message.chat.id != OPERATOR_ID and message.web_app_data is None, content_types=types.ContentTypes.ANY)
async def forward_to_operator(message: types.Message):
    try:
        # üü¢ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        
        user = message.from_user
        caption = (
            f"‚úâÔ∏è {user.full_name} (@{user.username})\n"
            f"üÜî ID: {user.id}\n\n"
        )

        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=reply_cb.new(client_id=user.id))
        )

        if message.text:
            await bot.send_message(OPERATOR_ID, caption + message.text, reply_markup=markup)
        elif message.photo:
            photo = message.photo[-1].file_id
            await bot.send_photo(OPERATOR_ID, photo=photo, caption=caption + (message.caption or ""), reply_markup=markup)
        elif message.voice:
            await bot.send_voice(OPERATOR_ID, message.voice.file_id, caption=caption, reply_markup=markup)
        elif message.video:
            await bot.send_video(OPERATOR_ID, message.video.file_id, caption=caption + (message.caption or ""), reply_markup=markup)
        elif message.document:
            await bot.send_document(OPERATOR_ID, message.document.file_id, caption=caption + (message.caption or ""), reply_markup=markup)
        elif message.location:
            await bot.send_message(OPERATOR_ID, caption + "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=markup)
            await bot.send_location(OPERATOR_ID, latitude=message.location.latitude, longitude=message.location.longitude)
        elif message.video_note:
            await bot.send_video_note(OPERATOR_ID, message.video_note.file_id)
        else:
            await bot.send_message(OPERATOR_ID, caption + "üìé –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø)", reply_markup=markup)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")


if __name__ == "__main__":
    from aiogram import executor
    from handlers import dp  # ‚ùå —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ

    async def on_startup(dp):
        await bot.set_webhook(WEBHOOK_URL)

    async def on_shutdown(dp):
        await bot.delete_webhook()

    executor.start_webhook(
        dispatcher=dp,
        webhook_path="/",
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",  # Render —Ç—Ä–µ–±—É–µ—Ç —ç—Ç–æ!
        port=int(os.environ.get("PORT", 8080))  # Render —Å–∞–º –∑–∞–¥–∞—ë—Ç PORT
    )

