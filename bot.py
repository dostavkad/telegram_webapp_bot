from contextlib import suppress
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.utils.callback_data import CallbackData
from aiogram.utils import executor

from aiogram import Bot, Dispatcher
from dotenv import load_dotenv
import os
import json
from datetime import datetime, date
import aiocron  # –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é

load_dotenv()  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

API_TOKEN = os.getenv("API_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID"))

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üì¶ CallbackData –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
status_cb = CallbackData("status", "action", "order_id", "client_id")
def save_order(order):
    now = datetime.now()
    order['timestamp'] = now.strftime('%Y-%m-%d %H:%M:%S')
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(order)
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
from datetime import date, timedelta

@aiocron.crontab('0 0 * * *')  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00
async def send_daily_report():
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    yesterday = (date.today() - timedelta(days=1)).strftime('%Y-%m-%d')
    orders = [o for o in data if o['timestamp'].startswith(yesterday)]
    total = sum(o.get("total", 0) for o in orders)
    count = len(orders)

    text = f"üßæ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ {yesterday}:\n\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º"
    if orders:
        text += "\n\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n"
        for i, order in enumerate(orders, 1):
            name = order.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            amount = order.get("total", 0)
            text += f"{i}) {name} ‚Äî {amount:,} —Å—É–º\n"

    await bot.send_message(ADMIN_CHAT_ID, text)

    # üßπ –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤
    updated_data = [o for o in data if o.get("status") != "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ"]
    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(updated_data, f, ensure_ascii=False, indent=2)

@dp.message_handler(Text(equals="üìä –û—Ç—á—ë—Ç"))
async def report_button_handler(message: types.Message):
    ADMIN_CHAT_ID = 611617181
    if message.from_user.id != ADMIN_CHAT_ID:
        return

    from datetime import date
    today = date.today().strftime('%Y-%m-%d')

    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    orders = [o for o in data if o['timestamp'].startswith(today)]
    total = sum(o.get("total", 0) for o in orders)
    count = len(orders)

    text = f"üìä –¢–µ–∫—É—â–∏–π –æ—Ç—á—ë—Ç –∑–∞ {today}:\n\nüì¶ –ó–∞–∫–∞–∑–æ–≤: {count}\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total:,} —Å—É–º"
    if orders:
        text += "\n\nüìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n"
        for i, order in enumerate(orders, 1):
            name = order.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            amount = order.get("total", 0)
            text += f"{i}) {name} ‚Äî {amount:,} —Å—É–º\n"

    await message.answer(text)

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(
        text="üõç –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        web_app=WebAppInfo(url="https://cedar-absorbing-oriole.glitch.me/")
    ))
    kb.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

    if message.from_user.id == ADMIN_CHAT_ID:
        kb.add(KeyboardButton("üìä –û—Ç—á—ë—Ç"))

    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "üöú –î–û–°–¢–ê–í–ö–ê –ü–†–Ø–ú–û –° –î–ï–•–ö–ê–ù–°–ö–û–ì–û –û–ü–¢–û–í–û–ì–û –ë–ê–ó–ê–†–ê\n"
        "üí∏ –î–µ—à–µ–≤–ª–µ, —á–µ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
        "üè° –ù–µ –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞ ‚Äî –∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏ –≠–ö–û–ù–û–ú–¨–¢–ï —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!\n\n"
        "üõç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤*, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.",
        reply_markup=kb,
        parse_mode='Markdown'
    )


# üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message_handler(Text(equals="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support_handler(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton(
        text="üõç –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        web_app=WebAppInfo(url="https://cedar-absorbing-oriole.glitch.me/")
    ))
    kb.add(KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

    await message.answer(
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: <a href='tel:+998(97)111-24-24'>+998 97 111 24 24</a>\n"
        "Telegram: <a href='https://t.me/jamshwdovich_8'>@jamshwdovich_8</a>",
        parse_mode='HTML'
    )

# üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def webapp_data_handler(message: types.Message):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    try:
        data = json.loads(message.web_app_data.data)
        order_text = data.get("text")
        order_id = data.get("order_id")
        client_id = data.get("client_id") or message.from_user.id

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫—É—Ä—å–µ—Ä–∞
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=status_cb.new(action="–æ–ø–ª–∞—á–µ–Ω–æ", order_id=order_id, client_id=client_id)),
            InlineKeyboardButton("üöó –í –ø—É—Ç–∏", callback_data=status_cb.new(action="–≤_–ø—É—Ç–∏", order_id=order_id, client_id=client_id)),
            InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", callback_data=status_cb.new(action="–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", order_id=order_id, client_id=client_id))
        )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä—É
        await bot.send_message(chat_id='611617181', text=order_text, parse_mode="Markdown", reply_markup=markup   )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç—É —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_message(
            chat_id=client_id,
            text=f"üì¶ *–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!*\nüì≤ *–°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!*\n\n{order_text}",
            parse_mode="Markdown"
        )

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑
        save_order(data)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

# üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(status_cb.filter())
async def status_handler(query: types.CallbackQuery, callback_data: dict):
    status = callback_data['action']
    order_id = callback_data['order_id']
    client_id = int(callback_data['client_id'])

    # –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª–µ
    try:
        with open("orders.json", "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []

    for order in data:
        if order.get("order_id") == order_id:
            order["status"] = status
            break

    with open("orders.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
    status_texts = {
        '–æ–ø–ª–∞—á–µ–Ω–æ': '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{} –æ–ø–ª–∞—á–µ–Ω.',
        '–≤_–ø—É—Ç–∏': 'üöó –í–∞—à –∑–∞–∫–∞–∑ #{} –≤ –ø—É—Ç–∏.',
        '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ': 'üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!'
    }
    message = status_texts.get(status, 'üì¶ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω').format(order_id)
    await bot.send_message(chat_id=client_id, text=message)
    await query.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: {status}")

import os
from aiogram.utils.executor import start_webhook

WEBHOOK_HOST = 'https://telegram-webapp-bot-vhk8.onrender.com'  # <-- –¢–≤–æ–π –∞–¥—Ä–µ—Å –Ω–∞ Render
WEBHOOK_PATH = '/webhook'
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

async def on_startup(dp):
    from contextlib import suppress
    with suppress(Exception):
        await send_daily_report.__wrapped__()  # –í—ã–∑–æ–≤ –æ—Ç—á—ë—Ç–∞
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host='0.0.0.0',
        port=int(os.environ.get('PORT', 10000))
    )

